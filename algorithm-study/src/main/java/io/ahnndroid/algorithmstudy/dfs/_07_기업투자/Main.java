package io.ahnndroid.algorithmstudy.dfs._07_기업투자;

/**
 * 
[ 문제 설명 ]
어떤 투자가가 여러 기업들에게 돈을 투자해서 최대의 이익을 얻고자 한다. 
단, 투자는 만원 단위로 할 수 있으며 각 기업은 많이 투자할수록 많은 이익을 투자가에게 돌려준다. 
돈을 투자하지 않은 경우는 당연히 얻게 되는 이익도 없다. 
예를 들어서, 한 투자가가 4만원을 갖고 두 개의 기업들에 각각 만원 단위로 투자했을 경우 얻을 수 있는 이익은 다음과 같다.
 
	| 투자 액수(만원)	|	기업 A	|	기업 B	|
	----------------+-----------+------------
	|		1		|	  5		|	  1		|
	----------------+-----------+------------
	|		2		|	  6		|	  5		|
	----------------+-----------+------------
	|		3		|	  7		|	  9		|
	----------------+-----------+------------
	|		4		|	  8		|	  15	|
	----------------+-----------+------------
 
위의 경우 만일, 기업 A에 1만원, 기업 B에 3만원을 투자하는 경우 투자가가 얻는 이익은 14만원(5만원+9만원)이다. 
4만원을 투자해서 가장 많은 이익을 얻을 경우 기업 B에만 4만원을 투자하는 경우로서 이때의 이익은 15만원이다. 
여기서 투자가는 한 기업에 돈을 나누어 투자할 수는 없다.
 
투자액이 정해져 있고, 기업의 개수와 각 기업에 투자했을 경우에 얻게 되는 이익이 주어졌을 때 
가장 많은 이익을 얻을 수 있는 투자방식과 이때의 이익금을 구하는 프로그램을 작성하라.


[ 입력 ]
첫 줄은 투자 금액과 투자 가능한 기업들의 개수이며, 
둘째 줄부터 각 줄은 투자액수 및 각 기업이 투자가에게 주는 이익이다. 

단, 총 투자금액은 30만원을 넘지 않으며, 
투자 가능한 기업의 개수는 최대 7개이다.


[ 출력 ]
첫 줄에 얻을 수 있는 최대 이익을 출력하고, 
둘째 줄에는 각 기업에 투자한 액수를 출력한다.


[ 입력 예시 ]
4 2
1 5 1
2 6 5
3 7 9
4 10 15


[ 출력 예시 ]
15
0 4

 * 
 * @author ahnndroid
 *
 */
import java.util.Scanner;

public class Main {
	
	// 투자 금액
	static int M;
	// 투자 가능한 기업들의 개수
	static int N;
	// 투자 금액 대비 기업별 투자 이익 관련 배열
	static int[][] a = new int[30 + 10][7 + 10];
	// 각 기업별 투자 액수를 담을 전역 변수
	static int[] V = new int[7 + 10];
	// 최대 이익에 관한 정답을 담을 전역 변수
	static int sol;
	// 각 기업별 투자한 최종 액수를 담을 전역 변수
	static int[] sol_V = new int[7 + 10];
	
	/**
	 * 알고리즘 연산에 필요한 전역 변수 입력 초기화
	 */
	static void init() {
		Scanner sc = new Scanner(System.in);
		
		M = sc.nextInt();
		N = sc.nextInt();
		
		for (int i = 1; i <= M; i++) {
			for (int j = 0; j <= N; j++) {
				a[i][j] = sc.nextInt();
			}
		}
		
		sc.close();
	}
	
	/**
	 * 
	 * @param pos : 탐색 순번 (여기서는 투자 기업의 번호)
	 * @param invest : 투자 액수
	 * @param profit : 투자 이익금
	 */
	static void DFS(int pos, int invest, int profit) {
		// 1. 종료 조건
		// 현재 순번이 범위를 벗어나거나 투자 금액이 0원이면
		if (pos == N + 1 || invest == 0) {
			// 투자 이익금이 sol보다 큰 경우, 이익금 및 sol_V 업데이트
			if (profit > sol) {
				sol = profit;
				
				for(int i = 1; i <= N; i++) {
					sol_V[i] = V[i];
				}
			}
			
			return;
		}
		
		// 깊이 우선 탐색 진행
		for (int i = 0; i <= M; i++) {	// 여기서 i는 투자 금액
			// 2. 가지 치기
			// 현재 투자 금액이 현재까지의 투자 금액보다 크다면 탐색 종료
			if (i > invest) break;
			
			V[pos] = i;		// 현재 선택된 기업의 투자 금액 업데이트
			DFS(pos + 1, invest - i, profit + a[i][pos]);
			V[pos] = 0;		// 현재 선택된 기업의 투자 금액 초기화
		}
	}
	
	/**
	 * 최대 이익 & 각 기업별 투자 액수를 출력하는 유틸 메소드
	 */
	static void print() {
		System.out.println(sol);
		
		for (int i = 1; i <= N; i++) {
			System.out.print(sol_V[i] + " ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		init();
		
		DFS(1, M, 0);
		
		print();
	}

}
